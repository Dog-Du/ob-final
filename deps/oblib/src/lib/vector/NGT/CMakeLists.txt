cmake_minimum_required(VERSION 3.20)

project(ngt)

# For QG, it is recommended to disable rotation of the vector space and residual vectors to improve performance as follows.
# cmake -DNGTQG_NO_ROTATION=ON -DNGTQG_ZERO_GLOBAL=ON ..
set(NGTQG_NO_ROTATION OFF)
set(NGTQG_ZERO_GLOBAL OFF)

set(NGT_AVX_DISABLED OFF)
set(NGT_OPENMP_DISABLED OFF)
set(NGT_MARCH_NATIVE_DISABLED OFF)
set(NGT_SHARED_MEMORY_ALLOCATOR OFF)
set(NGT_QBG_DISABLED ON)
set(NGT_LARGE_DATASET OFF)


file(STRINGS "VERSION" ngt_VERSION)
message(STATUS "VERSION: ${ngt_VERSION}")
string(REGEX MATCH "^[0-9]+" ngt_VERSION_MAJOR ${ngt_VERSION})
option(NGT_TEST "ngt_test" OFF)

set(ngt_VERSION ${ngt_VERSION})
set(ngt_SOVERSION ${ngt_VERSION_MAJOR})

if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    # do nothing
elseif(${CMAKE_BUILD_TYPE} STREQUAL "Relwithinfo")
    # do nothing
    set(CMAKE_BUILD_TYPE "Release")
else()
    set(CMAKE_BUILD_TYPE "Release")
endif()

string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_LOWER)
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_BUILD_TYPE_LOWER: ${CMAKE_BUILD_TYPE_LOWER}")

if(${NGT_SHARED_MEMORY_ALLOCATOR})
    set(NGT_QBG_DISABLED TRUE)
endif(${NGT_SHARED_MEMORY_ALLOCATOR})

if(${UNIX})
    set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)

    if(CMAKE_VERSION VERSION_LESS 3.1)
        set(BASE_OPTIONS "-Wall -std=gnu++0x -lrt")

        if(${NGT_AVX_DISABLED})
            message(STATUS "AVX will not be used to compute distances.")
        endif()

        if(${NGT_OPENMP_DISABLED})
            message(STATUS "OpenMP is disabled.")
        else()
            set(BASE_OPTIONS "${BASE_OPTIONS} -fopenmp")
        endif()

        if(${NGT_ASSERT_DISABLED})
            message(STATUS "assert() is disabled.")
            set(BASE_OPTIONS "${BASE_OPTIONS} -DNDEBUG")
        endif()

        # set(CMAKE_CXX_FLAGS_DEBUG "-g ${BASE_OPTIONS}")

        if(${NGT_MARCH_NATIVE_DISABLED})
            message(STATUS "Compile option -march=native is disabled.")
            set(CMAKE_CXX_FLAGS_RELEASE "-O2 ${BASE_OPTIONS}")
        else()
            set(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=native ${BASE_OPTIONS}")
        endif()
    else()
        if (CMAKE_BUILD_TYPE_LOWER STREQUAL "release")
            set(CMAKE_CXX_FLAGS_RELEASE "")
            if(${NGT_MARCH_NATIVE_DISABLED})
                message(STATUS "Compile option -march=native is disabled.")
                add_compile_options(-O2 -DNDEBUG)
            elseif(${NGT_AVX2})
                add_compile_options(-O3 -march=haswell -DNDEBUG)
            elseif(${NGT_AVX_DISABLED})
                message(STATUS "AVX will not be used to compute distances.")
                add_compile_options(-O3 -march=x86-64 -DNDEBUG)
            else()
                add_compile_options(-O3 -march=native -DNDEBUG)
            endif()
        endif()
        add_compile_options(-Wall)
        if(${NGT_OPENMP_DISABLED})
            message(STATUS "OpenMP is disabled.")
        else()
            if(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
                if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.1.0")
                    message(FATAL_ERROR "Insufficient AppleClang version")
                endif()
                cmake_minimum_required(VERSION 3.16)
            endif()
            set(OpenMP_omp_LIBRARY "-fopenmp")
            set(OpenMP_gomp_LIBRARY "-fopenmp")
            set(OpenMP_CXX_FLAGS "-fopenmp")
            set(OpenMP_CXX_LIB_NAMES "omp")
            set(OpenMP_C_FLAGS "-fopenmp")
            set(OpenMP_C_LIB_NAMES "omp")
            find_package(OpenMP QUIET)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
        endif()
        set(CMAKE_CXX_STANDARD 11) # for std::unordered_set, std::unique_ptr
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
	find_package(Threads REQUIRED)
        if(${NGT_QBG_DISABLED})
            message(STATUS "QBG is disabled.")
        else()
            find_package(BLAS QUIET)
            find_package(LAPACK QUIET)
        endif()
    endif()

    if(${NGT_BFLOAT_DISABLED})
        message(STATUS "bfloat is disabled.")
    endif()

    set(OpenMP_omp_LIBRARY "-fopenmp")
    set(OpenMP_gomp_LIBRARY "-fopenmp")
    set(OpenMP_CXX_FLAGS "-fopenmp")
    set(OpenMP_CXX_LIB_NAMES "omp")
    set(OpenMP_C_FLAGS "-fopenmp")
    set(OpenMP_C_LIB_NAMES "omp")

    add_subdirectory("${PROJECT_SOURCE_DIR}/lib")
    # add_subdirectory("${PROJECT_SOURCE_DIR}/bin")
    # add_subdirectory("${PROJECT_SOURCE_DIR}/samples")

    message(STATUS "Binary directory: ${CMAKE_CURRENT_BINARY_DIR}")
    add_library(ob_ngt_lib ob_ngt_lib.cpp)
    target_include_directories(ob_ngt_lib PRIVATE lib)
    target_include_directories(ob_ngt_lib PRIVATE lib/NGT)
    target_include_directories(ob_ngt_lib PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/lib)
    target_link_libraries(ob_ngt_lib PRIVATE ${CMAKE_BINARY_DIR}/lib/NGT/libngt.a)
    target_link_libraries(ob_ngt_lib PRIVATE -fopenmp)
    add_definitions(-DNGT_INDEX_PATH_DIR="${CMAKE_BINARY_DIR}/")

    if(${NGT_QBG_DISABLED})
        message(STATUS "QBG is disabled.")
    else()
	    find_package(MKL QUIET)
		if (MKL_FOUND)
				message(STATUS "MKL found, linking MKL libraries")
				target_link_libraries(ob_ngt_lib PRIVATE ${MKL_LIBRARIES})
		else()
				# 如果 MKL 不可用，尝试使用 OpenBLAS 或标准 BLAS/LAPACK
				find_package(OpenBLAS QUIET)
				if (OpenBLAS_FOUND)
						message(STATUS "OpenBLAS found, linking OpenBLAS libraries")
						target_link_libraries(ob_ngt_lib PRIVATE OpenBLAS::OpenBLAS)
				else()
						find_package(BLAS QUIET)
						find_package(LAPACK QUIET)
						message(STATUS "Using standard BLAS/LAPACK")
						target_link_libraries(ob_ngt_lib PRIVATE ${BLAS_LIBRARIES} ${LAPACK_LIBRARIES})
				endif()
		endif()
    endif()

    add_dependencies(ob_ngt_lib ngt)

    if (NGT_TEST)
        add_subdirectory (samples)
        add_executable(ngt_test_test_test ngt_test.cpp)
        target_link_libraries(ngt_test_test_test PRIVATE ob_ngt_lib)
        target_link_libraries(ngt_test_test_test PRIVATE -fopenmp)
        add_dependencies(ngt_test_test_test ob_ngt_lib)
    endif()
endif(${UNIX})
